type token =
  | EOF
  | INT of (Range.t * int32)
  | X of (Range.t)
  | ADD of (Range.t)
  | SUB of (Range.t)
  | MUL of (Range.t)
  | EQ of (Range.t)
  | SLA of (Range.t)
  | SRA of (Range.t)
  | SRL of (Range.t)
  | NEQ of (Range.t)
  | LT of (Range.t)
  | LTEQ of (Range.t)
  | GT of (Range.t)
  | GTEQ of (Range.t)
  | NOT of (Range.t)
  | BNOT of (Range.t)
  | BAND of (Range.t)
  | BOR of (Range.t)
  | LPAR of (Range.t)
  | RPAR of (Range.t)

open Parsing;;
# 2 "parser.mly"
open Ast;;
# 28 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* X *);
  259 (* ADD *);
  260 (* SUB *);
  261 (* MUL *);
  262 (* EQ *);
  263 (* SLA *);
  264 (* SRA *);
  265 (* SRL *);
  266 (* NEQ *);
  267 (* LT *);
  268 (* LTEQ *);
  269 (* GT *);
  270 (* GTEQ *);
  271 (* NOT *);
  272 (* BNOT *);
  273 (* BAND *);
  274 (* BOR *);
  275 (* LPAR *);
  276 (* RPAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\006\000\
\006\000\007\000\007\000\007\000\008\000\008\000\009\000\009\000\
\009\000\009\000\010\000\010\000\011\000\011\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\003\000\001\000\003\000\003\000\001\000\
\003\000\003\000\003\000\003\000\001\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\002\000\002\000\
\002\000\001\000\003\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\030\000\029\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\026\000\028\000\025\000\023\000\024\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000"

let yysindex = "\009\000\
\005\255\000\000\000\000\000\000\005\255\005\255\005\255\005\255\
\000\000\002\000\239\254\002\255\003\255\022\255\019\255\013\255\
\000\000\000\000\000\000\000\000\000\000\000\000\249\254\000\000\
\005\255\005\255\005\255\005\255\005\255\005\255\005\255\005\255\
\005\255\005\255\005\255\005\255\005\255\005\255\000\000\239\254\
\002\255\003\255\003\255\022\255\022\255\022\255\022\255\019\255\
\019\255\019\255\013\255\013\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\166\000\181\000\171\000\110\000\052\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\182\000\
\190\000\177\000\186\000\123\000\136\000\149\000\162\000\067\000\
\082\000\097\000\019\000\037\000\000\000"

let yygindex = "\000\000\
\000\000\027\000\017\000\018\000\011\000\252\255\255\255\004\000\
\254\255\000\000\000\000"

let yytablesize = 466
let yytable = "\026\000\
\020\000\024\000\020\000\021\000\022\000\003\000\004\000\027\000\
\005\000\001\000\025\000\028\000\039\000\029\000\030\000\031\000\
\032\000\038\000\018\000\006\000\007\000\036\000\037\000\008\000\
\044\000\045\000\046\000\047\000\033\000\034\000\035\000\048\000\
\049\000\050\000\023\000\053\000\019\000\042\000\043\000\051\000\
\052\000\040\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\005\000\002\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\020\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\
\000\000\020\000\020\000\025\000\020\000\018\000\018\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\000\000\000\000\018\000\018\000\000\000\018\000\019\000\
\019\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\000\000\019\000\019\000\000\000\
\019\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\000\000\017\000\017\000\000\000\017\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\000\000\014\000\014\000\000\000\014\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\000\000\000\000\015\000\015\000\000\000\015\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\000\000\016\000\016\000\013\000\016\000\000\000\000\000\013\000\
\013\000\013\000\013\000\013\000\000\000\000\000\013\000\013\000\
\009\000\013\000\000\000\000\000\009\000\009\000\009\000\009\000\
\009\000\000\000\000\000\009\000\009\000\010\000\009\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\000\000\000\000\
\010\000\010\000\011\000\010\000\000\000\000\000\011\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\012\000\
\011\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\
\008\000\000\000\012\000\012\000\008\000\012\000\006\000\003\000\
\000\000\003\000\006\000\008\000\008\000\000\000\008\000\007\000\
\000\000\006\000\006\000\007\000\006\000\005\000\005\000\002\000\
\005\000\002\000\007\000\007\000\000\000\007\000\004\000\004\000\
\000\000\004\000"

let yycheck = "\017\001\
\000\000\000\000\005\000\006\000\007\000\001\001\002\001\006\001\
\004\001\001\000\018\001\010\001\020\001\011\001\012\001\013\001\
\014\001\005\001\000\000\015\001\016\001\003\001\004\001\019\001\
\029\000\030\000\031\000\032\000\007\001\008\001\009\001\033\000\
\034\000\035\000\008\000\038\000\000\000\027\000\028\000\036\000\
\037\000\025\000\255\255\026\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\018\001\020\001\003\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\255\255\020\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\255\255\
\020\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\255\255\020\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\255\255\020\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\255\255\020\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\006\001\020\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\006\001\020\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\006\001\020\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\006\001\020\001\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\006\001\
\020\001\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\006\001\255\255\017\001\018\001\010\001\020\001\006\001\018\001\
\255\255\020\001\010\001\017\001\018\001\255\255\020\001\006\001\
\255\255\017\001\018\001\010\001\020\001\017\001\018\001\018\001\
\020\001\020\001\017\001\018\001\255\255\020\001\017\001\018\001\
\255\255\020\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  X\000\
  ADD\000\
  SUB\000\
  MUL\000\
  EQ\000\
  SLA\000\
  SRA\000\
  SRL\000\
  NEQ\000\
  LT\000\
  LTEQ\000\
  GT\000\
  GTEQ\000\
  NOT\000\
  BNOT\000\
  BAND\000\
  BOR\000\
  LPAR\000\
  RPAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 36 "parser.mly"
            ( _1 )
# 260 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp50) in
    Obj.repr(
# 41 "parser.mly"
                  ( Binop (Or, _1, _3) )
# 269 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp50) in
    Obj.repr(
# 42 "parser.mly"
         ( _1 )
# 276 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp50) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp60) in
    Obj.repr(
# 45 "parser.mly"
                    ( Binop (And, _1, _3) )
# 285 "parser.ml"
               : 'exp50))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp60) in
    Obj.repr(
# 46 "parser.mly"
         ( _1 )
# 292 "parser.ml"
               : 'exp50))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp60) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp70) in
    Obj.repr(
# 49 "parser.mly"
                   ( Binop (Eq , _1, _3) )
# 301 "parser.ml"
               : 'exp60))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp60) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp70) in
    Obj.repr(
# 50 "parser.mly"
                   ( Binop (Neq, _1, _3) )
# 310 "parser.ml"
               : 'exp60))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp70) in
    Obj.repr(
# 51 "parser.mly"
         ( _1 )
# 317 "parser.ml"
               : 'exp60))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp70) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp80) in
    Obj.repr(
# 54 "parser.mly"
                    (Binop (Lt , _1, _3) )
# 326 "parser.ml"
               : 'exp70))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp70) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp80) in
    Obj.repr(
# 55 "parser.mly"
                    (Binop (Lte, _1, _3) )
# 335 "parser.ml"
               : 'exp70))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp70) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp80) in
    Obj.repr(
# 56 "parser.mly"
                    (Binop (Gt , _1, _3) )
# 344 "parser.ml"
               : 'exp70))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp70) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp80) in
    Obj.repr(
# 57 "parser.mly"
                    (Binop (Gte, _1, _3) )
# 353 "parser.ml"
               : 'exp70))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp80) in
    Obj.repr(
# 58 "parser.mly"
         ( _1 )
# 360 "parser.ml"
               : 'exp70))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp80) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp90) in
    Obj.repr(
# 61 "parser.mly"
                   (Binop (Shl, _1, _3) )
# 369 "parser.ml"
               : 'exp80))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp80) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp90) in
    Obj.repr(
# 62 "parser.mly"
                   (Binop (Sar, _1, _3) )
# 378 "parser.ml"
               : 'exp80))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp80) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp90) in
    Obj.repr(
# 63 "parser.mly"
                   (Binop (Shr, _1, _3) )
# 387 "parser.ml"
               : 'exp80))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp90) in
    Obj.repr(
# 64 "parser.mly"
         ( _1 )
# 394 "parser.ml"
               : 'exp80))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp90) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp100) in
    Obj.repr(
# 67 "parser.mly"
                    (Binop (Plus , _1, _3) )
# 403 "parser.ml"
               : 'exp90))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp90) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp100) in
    Obj.repr(
# 68 "parser.mly"
                    (Binop (Minus, _1, _3) )
# 412 "parser.ml"
               : 'exp90))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp100) in
    Obj.repr(
# 69 "parser.mly"
          ( _1 )
# 419 "parser.ml"
               : 'exp90))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp100) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp110) in
    Obj.repr(
# 72 "parser.mly"
                     (Binop (Times, _1, _3) )
# 428 "parser.ml"
               : 'exp100))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp110) in
    Obj.repr(
# 73 "parser.mly"
          ( _1 )
# 435 "parser.ml"
               : 'exp100))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp110) in
    Obj.repr(
# 76 "parser.mly"
               ( Unop (Lognot, _2) )
# 443 "parser.ml"
               : 'exp110))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp110) in
    Obj.repr(
# 77 "parser.mly"
               ( Unop (Not	 , _2) )
# 451 "parser.ml"
               : 'exp110))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp110) in
    Obj.repr(
# 78 "parser.mly"
               ( Unop (Neg	 , _2) )
# 459 "parser.ml"
               : 'exp110))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp120) in
    Obj.repr(
# 79 "parser.mly"
          ( _1 )
# 466 "parser.ml"
               : 'exp110))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 82 "parser.mly"
                 ( _2 )
# 475 "parser.ml"
               : 'exp120))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp130) in
    Obj.repr(
# 83 "parser.mly"
          ( _1 )
# 482 "parser.ml"
               : 'exp120))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 86 "parser.mly"
        ( Arg )
# 489 "parser.ml"
               : 'exp130))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * int32) in
    Obj.repr(
# 87 "parser.mly"
       ( Cint (snd _1) )
# 496 "parser.ml"
               : 'exp130))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
